<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_graphs_8c_source" xml:lang="en-US">
<title>graphs.c</title>
<indexterm><primary>sources/graphs.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_graphs_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;time.h&gt;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;../headers/global.h&quot;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;../headers/graphs.h&quot;</emphasis>
<anchor xml:id="_graphs_8c_source_1l00008"/>00008 
<anchor xml:id="_graphs_8c_source_1l00009"/><link linkend="_graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167">00009</link> <emphasis role="preprocessor">#define&#32;MAX_VERTICES&#32;100</emphasis>
<anchor xml:id="_graphs_8c_source_1l00010"/>00010 
<anchor xml:id="_graphs_8c_source_1l00020"/><link linkend="_graphs_8h_1af94b6595ac77246b48a3f03fe146a6d3">00020</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graphs_8c_1af94b6595ac77246b48a3f03fe146a6d3">isGraphUnique</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>){
<anchor xml:id="_graphs_8c_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(startEntry&#32;!=&#32;NULL){
<anchor xml:id="_graphs_8c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_graphs_8c_source_1l00023"/>00023 
<anchor xml:id="_graphs_8c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startEntry&#32;=&#32;startEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00026"/>00026 
<anchor xml:id="_graphs_8c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_graphs_8c_source_1l00028"/>00028 }
<anchor xml:id="_graphs_8c_source_1l00029"/>00029 
<anchor xml:id="_graphs_8c_source_1l00039"/><link linkend="_graphs_8h_1ae350462ced1dc7ba74592037e3c9d88d">00039</link> <link linkend="_struct_graph_list">Graph</link>&#32;*<link linkend="_graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d">addVertex</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<link linkend="_struct_aux_list">Aux</link>&#32;vehicle)&#32;{
<anchor xml:id="_graphs_8c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_graphs_8c_1af94b6595ac77246b48a3f03fe146a6d3">isGraphUnique</link>(startEntry,&#32;<emphasis role="keywordtype">id</emphasis>)){
<anchor xml:id="_graphs_8c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\nErro:&#32;Este&#32;vertice&#32;ja&#32;foi&#32;registado!\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(startEntry);
<anchor xml:id="_graphs_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00044"/>00044 
<anchor xml:id="_graphs_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<link linkend="_struct_graph_list">Graph</link>&#32;*newEntry&#32;=&#32;malloc(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_graph_list">GraphList</link>));
<anchor xml:id="_graphs_8c_source_1l00046"/>00046 
<anchor xml:id="_graphs_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newEntry&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>&#32;=&#32;id;
<anchor xml:id="_graphs_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>&#32;=&#32;vehicle;
<anchor xml:id="_graphs_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>&#32;=&#32;NULL;
<anchor xml:id="_graphs_8c_source_1l00051"/>00051 
<anchor xml:id="_graphs_8c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newEntry;
<anchor xml:id="_graphs_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_graphs_8c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_graph_list">Graph</link>&#32;*currentEntry&#32;=&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00056"/>00056 
<anchor xml:id="_graphs_8c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(currentEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentEntry&#32;=&#32;currentEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00060"/>00060 
<anchor xml:id="_graphs_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>&#32;=&#32;newEntry;
<anchor xml:id="_graphs_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00064"/>00064 
<anchor xml:id="_graphs_8c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00066"/>00066 }
<anchor xml:id="_graphs_8c_source_1l00067"/>00067 
<anchor xml:id="_graphs_8c_source_1l00076"/><link linkend="_graphs_8h_1a638753f6469282e3b39c8286813cfd34">00076</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_graphs_8c_1a638753f6469282e3b39c8286813cfd34">generateRandomDistance</link>()&#32;{
<anchor xml:id="_graphs_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;a&#32;random&#32;distance&#32;between&#32;1.0&#32;and&#32;10.0&#32;(you&#32;can&#32;adjust&#32;the&#32;range&#32;as&#32;needed)</emphasis>
<anchor xml:id="_graphs_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distance&#32;=&#32;(float)(rand()&#32;%&#32;1000)&#32;/&#32;100.0&#32;+&#32;1.0;
<anchor xml:id="_graphs_8c_source_1l00079"/>00079 
<anchor xml:id="_graphs_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;distance;
<anchor xml:id="_graphs_8c_source_1l00081"/>00081 }
<anchor xml:id="_graphs_8c_source_1l00082"/>00082 
<anchor xml:id="_graphs_8c_source_1l00092"/><link linkend="_graphs_8h_1adc3948acb11d8597092ee47d0a6e8f7c">00092</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c">doesVertexExist</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*graph,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex)&#32;{
<anchor xml:id="_graphs_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(graph&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(graph-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>&#32;==&#32;vertex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_graphs_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;
<anchor xml:id="_graphs_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;graph&#32;=&#32;graph-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00098"/>00098 
<anchor xml:id="_graphs_8c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_graphs_8c_source_1l00100"/>00100 }
<anchor xml:id="_graphs_8c_source_1l00101"/>00101 
<anchor xml:id="_graphs_8c_source_1l00111"/><link linkend="_graphs_8h_1af72fe49941374d635aff9d7526fc7565">00111</link> <link linkend="_struct_edge_list">Edge</link>&#32;*<link linkend="_graphs_8c_1af72fe49941374d635aff9d7526fc7565">AddEdge</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*graph,&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*startEntry,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startVertex,&#32;<emphasis role="keywordtype">int</emphasis>&#32;endVertex)&#32;{
<anchor xml:id="_graphs_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c">doesVertexExist</link>(graph,&#32;startVertex)&#32;&amp;&amp;&#32;<link linkend="_graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c">doesVertexExist</link>(graph,&#32;endVertex))&#32;{
<anchor xml:id="_graphs_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*newEntry&#32;=&#32;malloc(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_edge_list">EdgeList</link>));
<anchor xml:id="_graphs_8c_source_1l00114"/>00114 
<anchor xml:id="_graphs_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newEntry&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_edge_list_1aff105884864d9eb93769b4323f180562">vertexA</link>&#32;=&#32;startVertex;
<anchor xml:id="_graphs_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b">vertexB</link>=&#32;endVertex;
<anchor xml:id="_graphs_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b">distance</link>&#32;=&#32;<link linkend="_graphs_8c_1a638753f6469282e3b39c8286813cfd34">generateRandomDistance</link>();
<anchor xml:id="_graphs_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEntry-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>&#32;=&#32;NULL;
<anchor xml:id="_graphs_8c_source_1l00120"/>00120 
<anchor xml:id="_graphs_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newEntry;
<anchor xml:id="_graphs_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_graphs_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*currentEntry&#32;=&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00125"/>00125 
<anchor xml:id="_graphs_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(currentEntry-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentEntry&#32;=&#32;currentEntry-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00129"/>00129 
<anchor xml:id="_graphs_8c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentEntry-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>&#32;=&#32;newEntry;
<anchor xml:id="_graphs_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00133"/>00133 
<anchor xml:id="_graphs_8c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_graphs_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Um&#32;dos&#32;vertices&#32;indicados&#32;nao&#32;existe&#32;%d&#32;-&#32;%d\n&quot;</emphasis>,&#32;startVertex,&#32;endVertex);
<anchor xml:id="_graphs_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00139"/>00139 }
<anchor xml:id="_graphs_8c_source_1l00140"/>00140 
<anchor xml:id="_graphs_8c_source_1l00150"/><link linkend="_graphs_8h_1a3c2e0335cdd5b4448a77337f76c11022">00150</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graphs_8c_1a3c2e0335cdd5b4448a77337f76c11022">isEdgePresent</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*graph,&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*edge,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertexA,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertexB)&#32;{
<anchor xml:id="_graphs_8c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(edge&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((edge-&gt;<link linkend="_struct_edge_list_1aff105884864d9eb93769b4323f180562">vertexA</link>&#32;==&#32;vertexA&#32;&amp;&amp;&#32;edge-&gt;<link linkend="_struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b">vertexB</link>&#32;==&#32;vertexB)&#32;||
<anchor xml:id="_graphs_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(edge-&gt;<link linkend="_struct_edge_list_1aff105884864d9eb93769b4323f180562">vertexA</link>&#32;==&#32;vertexB&#32;&amp;&amp;&#32;edge-&gt;<link linkend="_struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b">vertexB</link>&#32;==&#32;vertexA))&#32;{
<anchor xml:id="_graphs_8c_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_graphs_8c_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00156"/>00156 
<anchor xml:id="_graphs_8c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge&#32;=&#32;edge-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00158"/>00158 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00159"/>00159 
<anchor xml:id="_graphs_8c_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_graphs_8c_source_1l00161"/>00161 }
<anchor xml:id="_graphs_8c_source_1l00162"/>00162 
<anchor xml:id="_graphs_8c_source_1l00172"/><link linkend="_graphs_8h_1a0cb364c7e705c406ebe537678438911a">00172</link> <link linkend="_struct_edge_list">Edge</link>&#32;*<link linkend="_graphs_8c_1a0cb364c7e705c406ebe537678438911a">generateRandomGraph</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*graph,&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*edge,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numEdges)&#32;{
<anchor xml:id="_graphs_8c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numVertices&#32;&lt;=&#32;0&#32;||&#32;numEdges&#32;&lt;=&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge;
<anchor xml:id="_graphs_8c_source_1l00174"/>00174 
<anchor xml:id="_graphs_8c_source_1l00175"/>00175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numEdges&#32;&gt;&#32;numVertices&#32;*&#32;(numVertices&#32;-&#32;1)&#32;/&#32;2)&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge;
<anchor xml:id="_graphs_8c_source_1l00176"/>00176 
<anchor xml:id="_graphs_8c_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*vertices&#32;=&#32;malloc(numVertices&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>));
<anchor xml:id="_graphs_8c_source_1l00178"/>00178 
<anchor xml:id="_graphs_8c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vertices&#32;==&#32;NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge;
<anchor xml:id="_graphs_8c_source_1l00180"/>00180 
<anchor xml:id="_graphs_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;i++)&#32;{
<anchor xml:id="_graphs_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices[i]&#32;=&#32;i&#32;+&#32;1;
<anchor xml:id="_graphs_8c_source_1l00183"/>00183 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00184"/>00184 
<anchor xml:id="_graphs_8c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;numVertices&#32;-&#32;1;&#32;i&#32;&gt;&#32;0;&#32;i--)&#32;{
<anchor xml:id="_graphs_8c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;rand()&#32;%&#32;(i&#32;+&#32;1);
<anchor xml:id="_graphs_8c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;temp&#32;=&#32;vertices[i];
<anchor xml:id="_graphs_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices[i]&#32;=&#32;vertices[j];
<anchor xml:id="_graphs_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices[j]&#32;=&#32;temp;
<anchor xml:id="_graphs_8c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00191"/>00191 
<anchor xml:id="_graphs_8c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remainingEdges&#32;=&#32;numEdges;
<anchor xml:id="_graphs_8c_source_1l00193"/>00193 
<anchor xml:id="_graphs_8c_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices&#32;-&#32;1&#32;&amp;&amp;&#32;numEdges&#32;&gt;&#32;0;&#32;i++)&#32;{
<anchor xml:id="_graphs_8c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;(i&#32;+&#32;1)&#32;%&#32;numVertices;
<anchor xml:id="_graphs_8c_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge&#32;=&#32;<link linkend="_graphs_8c_1af72fe49941374d635aff9d7526fc7565">AddEdge</link>(graph,&#32;edge,&#32;vertices[i],&#32;vertices[j]);
<anchor xml:id="_graphs_8c_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remainingEdges--;
<anchor xml:id="_graphs_8c_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00199"/>00199 
<anchor xml:id="_graphs_8c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(remainingEdges&#32;!=&#32;0)&#32;{
<anchor xml:id="_graphs_8c_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;randomVertexA&#32;=&#32;vertices[rand()&#32;%&#32;numVertices];
<anchor xml:id="_graphs_8c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;randomVertexB&#32;=&#32;vertices[rand()&#32;%&#32;numVertices];
<anchor xml:id="_graphs_8c_source_1l00203"/>00203 
<anchor xml:id="_graphs_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(randomVertexA&#32;!=&#32;randomVertexB&#32;&amp;&amp;&#32;!<link linkend="_graphs_8c_1a3c2e0335cdd5b4448a77337f76c11022">isEdgePresent</link>(graph,&#32;edge,&#32;randomVertexA,&#32;randomVertexB))&#32;{
<anchor xml:id="_graphs_8c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge&#32;=&#32;<link linkend="_graphs_8c_1af72fe49941374d635aff9d7526fc7565">AddEdge</link>(graph,&#32;edge,&#32;randomVertexA,&#32;randomVertexB);
<anchor xml:id="_graphs_8c_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remainingEdges--;
<anchor xml:id="_graphs_8c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00209"/>00209 
<anchor xml:id="_graphs_8c_source_1l00210"/>00210 &#32;&#32;&#32;&#32;free(vertices);
<anchor xml:id="_graphs_8c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge;
<anchor xml:id="_graphs_8c_source_1l00212"/>00212 }
<anchor xml:id="_graphs_8c_source_1l00213"/>00213 
<anchor xml:id="_graphs_8c_source_1l00222"/><link linkend="_graphs_8h_1a3ab9e14d9194e69df48f70def6d45370">00222</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graphs_8c_1a3ab9e14d9194e69df48f70def6d45370">listGraph</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry,&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*startEdge)&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="_graphs_8c_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Nao&#32;ha&#32;vertices&#32;guardados\n\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_graphs_8c_source_1l00226"/>00226 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00227"/>00227 
<anchor xml:id="_graphs_8c_source_1l00228"/>00228 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Mapa!\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00229"/>00229 
<anchor xml:id="_graphs_8c_source_1l00230"/>00230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(startEntry&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\nZona:&#32;%d\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>);
<anchor xml:id="_graphs_8c_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Veiculo:&#32;%s&#32;%s\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a19d9312fa6559481585c37eec00fdccf">brand</link>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a407e8645b05b8866c6aae96539051b4d">model</link>);
<anchor xml:id="_graphs_8c_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Bateria:&#32;%d%%\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf">currentBattery</link>);
<anchor xml:id="_graphs_8c_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graphs_8c_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_edge_list">Edge</link>&#32;*newEdge&#32;=&#32;startEdge;
<anchor xml:id="_graphs_8c_source_1l00236"/>00236 
<anchor xml:id="_graphs_8c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hasEdges&#32;=&#32;0;
<anchor xml:id="_graphs_8c_source_1l00238"/>00238 
<anchor xml:id="_graphs_8c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(newEdge&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>&#32;==&#32;newEdge-&gt;<link linkend="_struct_edge_list_1aff105884864d9eb93769b4323f180562">vertexA</link>&#32;||&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>&#32;==&#32;newEdge-&gt;<link linkend="_struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b">vertexB</link>){
<anchor xml:id="_graphs_8c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Zonas&#32;conectadas:&#32;%d&#32;-&#32;%d,&#32;Distancia:&#32;%.2fkm\n&quot;</emphasis>,&#32;newEdge-&gt;<link linkend="_struct_edge_list_1aff105884864d9eb93769b4323f180562">vertexA</link>,&#32;newEdge-&gt;<link linkend="_struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b">vertexB</link>,&#32;newEdge-&gt;<link linkend="_struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b">distance</link>);
<anchor xml:id="_graphs_8c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasEdges&#32;=&#32;1;
<anchor xml:id="_graphs_8c_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_graphs_8c_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newEdge&#32;=&#32;newEdge-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00247"/>00247 
<anchor xml:id="_graphs_8c_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasEdges&#32;==&#32;0)&#32;printf(<emphasis role="stringliteral">&quot;Nao&#32;esta&#32;conectado&#32;a&#32;outro&#32;vertice!\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00249"/>00249 
<anchor xml:id="_graphs_8c_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startEntry&#32;=&#32;startEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00251"/>00251 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00252"/>00252 }
<anchor xml:id="_graphs_8c_source_1l00253"/>00253 
<anchor xml:id="_graphs_8c_source_1l00262"/><link linkend="_graphs_8h_1aae6d29c48d0d248e16014ef35b50a5ea">00262</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graphs_8c_1aae6d29c48d0d248e16014ef35b50a5ea">listZones</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry)&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="_graphs_8c_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Nao&#32;ha&#32;vertices&#32;guardados\n\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_graphs_8c_source_1l00266"/>00266 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00267"/>00267 
<anchor xml:id="_graphs_8c_source_1l00268"/>00268 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Mapa!\n\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00269"/>00269 
<anchor xml:id="_graphs_8c_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(startEntry&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Zona:&#32;%d\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>);
<anchor xml:id="_graphs_8c_source_1l00272"/>00272 
<anchor xml:id="_graphs_8c_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startEntry&#32;=&#32;startEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00274"/>00274 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00275"/>00275 }
<anchor xml:id="_graphs_8c_source_1l00276"/>00276 
<anchor xml:id="_graphs_8c_source_1l00285"/><link linkend="_graphs_8h_1a17abe0cb34456a08730810427bdcf20d">00285</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graphs_8c_1a17abe0cb34456a08730810427bdcf20d">listVehiclesByZone</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry,&#32;<emphasis role="keywordtype">int</emphasis>&#32;zone)&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="_graphs_8c_source_1l00286"/>00286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Nao&#32;ha&#32;vertices&#32;guardados\n\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_graphs_8c_source_1l00289"/>00289 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00290"/>00290 
<anchor xml:id="_graphs_8c_source_1l00291"/>00291 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Veiculos&#32;num&#32;raio&#32;de&#32;%d&#32;zonas!\n\n&quot;</emphasis>,&#32;zone);
<anchor xml:id="_graphs_8c_source_1l00292"/>00292 
<anchor xml:id="_graphs_8c_source_1l00293"/>00293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(startEntry&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>&#32;&lt;=&#32;zone)&#32;{
<anchor xml:id="_graphs_8c_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Id:&#32;%d\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea">id</link>);
<anchor xml:id="_graphs_8c_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Veiculo:&#32;%s&#32;%s\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a19d9312fa6559481585c37eec00fdccf">brand</link>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a407e8645b05b8866c6aae96539051b4d">model</link>);
<anchor xml:id="_graphs_8c_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Preco:&#32;%.2f&#32;euros\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a500426aec97889b7572f25ae45c06a8d">price</link>);
<anchor xml:id="_graphs_8c_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Bateria:&#32;%d%%\n\n&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf">currentBattery</link>);
<anchor xml:id="_graphs_8c_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00300"/>00300 
<anchor xml:id="_graphs_8c_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startEntry&#32;=&#32;startEntry-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00302"/>00302 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00303"/>00303 }
<anchor xml:id="_graphs_8c_source_1l00304"/>00304 
<anchor xml:id="_graphs_8c_source_1l00314"/><link linkend="_graphs_8h_1aa65bd12637311f31250ec4d793db7574">00314</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graphs_8c_1aa65bd12637311f31250ec4d793db7574">saveVerticesOnDatabase</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry){
<anchor xml:id="_graphs_8c_source_1l00315"/>00315 &#32;&#32;&#32;&#32;<link linkend="_struct_graph_list">Graph</link>&#32;*aux&#32;=&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00316"/>00316 &#32;&#32;&#32;&#32;FILE&#32;*fp;
<anchor xml:id="_graphs_8c_source_1l00317"/>00317 
<anchor xml:id="_graphs_8c_source_1l00318"/>00318 &#32;&#32;&#32;&#32;fp&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;../databases/vertices_database.txt&quot;</emphasis>,<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00319"/>00319 
<anchor xml:id="_graphs_8c_source_1l00320"/>00320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fp==NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_graphs_8c_source_1l00321"/>00321 
<anchor xml:id="_graphs_8c_source_1l00322"/>00322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(aux&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;vertex:%d&quot;</emphasis>,&#32;startEntry-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>);
<anchor xml:id="_graphs_8c_source_1l00324"/>00324 
<anchor xml:id="_graphs_8c_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,<emphasis role="stringliteral">&quot;Vertex:%d;Id:%d;BatteryCap:%.2f;CurrBattery:%d;Autonomy:%.2f;Price:%.2f;Brand:%s;Model:%s;GPS:%s;\n&quot;</emphasis>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea">id</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a43a6e4be8d45c1a00a55a11d095c0399">batteryCapacity</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf">currentBattery</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a83cda76233a2b02dcc2b3707fa58e4e8">autonomy</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a500426aec97889b7572f25ae45c06a8d">price</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a19d9312fa6559481585c37eec00fdccf">brand</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a407e8645b05b8866c6aae96539051b4d">model</link>,&#32;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a28e6925eca319a182388b4d560d9026b">gpsTracker</link>);
<anchor xml:id="_graphs_8c_source_1l00326"/>00326 
<anchor xml:id="_graphs_8c_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aux&#32;=&#32;aux-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00328"/>00328 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00329"/>00329 
<anchor xml:id="_graphs_8c_source_1l00330"/>00330 &#32;&#32;&#32;&#32;fclose(fp);
<anchor xml:id="_graphs_8c_source_1l00331"/>00331 
<anchor xml:id="_graphs_8c_source_1l00332"/>00332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_graphs_8c_source_1l00333"/>00333 }
<anchor xml:id="_graphs_8c_source_1l00334"/>00334 
<anchor xml:id="_graphs_8c_source_1l00344"/><link linkend="_graphs_8h_1a860928daf7c19aa0b0a0ba64e780f8aa">00344</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_graphs_8c_1a860928daf7c19aa0b0a0ba64e780f8aa">saveVerticesOnBinaryDatabase</link>(<link linkend="_struct_graph_list">Graph</link>&#32;*startEntry)&#32;{
<anchor xml:id="_graphs_8c_source_1l00345"/>00345 &#32;&#32;&#32;&#32;<link linkend="_struct_graph_list">Graph</link>&#32;*aux&#32;=&#32;startEntry;
<anchor xml:id="_graphs_8c_source_1l00346"/>00346 &#32;&#32;&#32;&#32;FILE&#32;*fp;
<anchor xml:id="_graphs_8c_source_1l00347"/>00347 
<anchor xml:id="_graphs_8c_source_1l00348"/>00348 &#32;&#32;&#32;&#32;fp&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;../databases/vertices_database.bin&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;wb&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00349"/>00349 
<anchor xml:id="_graphs_8c_source_1l00350"/>00350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fp&#32;==&#32;NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_graphs_8c_source_1l00351"/>00351 
<anchor xml:id="_graphs_8c_source_1l00352"/>00352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(aux&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(&amp;aux-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>),&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(&amp;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea">id</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>),&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(&amp;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a43a6e4be8d45c1a00a55a11d095c0399">batteryCapacity</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>),&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(&amp;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf">currentBattery</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>),&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(&amp;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a83cda76233a2b02dcc2b3707fa58e4e8">autonomy</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>),&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(&amp;aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a500426aec97889b7572f25ae45c06a8d">price</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>),&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a19d9312fa6559481585c37eec00fdccf">brand</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>),&#32;strlen(aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a19d9312fa6559481585c37eec00fdccf">brand</link>)&#32;+&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a407e8645b05b8866c6aae96539051b4d">model</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>),&#32;strlen(aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a407e8645b05b8866c6aae96539051b4d">model</link>)&#32;+&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a28e6925eca319a182388b4d560d9026b">gpsTracker</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>),&#32;strlen(aux-&gt;<link linkend="_struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72">vehicle</link>.<link linkend="_struct_aux_list_1a28e6925eca319a182388b4d560d9026b">gpsTracker</link>)&#32;+&#32;1,&#32;fp);
<anchor xml:id="_graphs_8c_source_1l00362"/>00362 
<anchor xml:id="_graphs_8c_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aux&#32;=&#32;aux-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00364"/>00364 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00365"/>00365 
<anchor xml:id="_graphs_8c_source_1l00366"/>00366 &#32;&#32;&#32;&#32;fclose(fp);
<anchor xml:id="_graphs_8c_source_1l00367"/>00367 
<anchor xml:id="_graphs_8c_source_1l00368"/>00368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_graphs_8c_source_1l00369"/>00369 }
<anchor xml:id="_graphs_8c_source_1l00370"/>00370 
<anchor xml:id="_graphs_8c_source_1l00379"/><link linkend="_graphs_8h_1a7b16e36ae5b60ab0f6e1c6e8feaaf381">00379</link> <link linkend="_struct_graph_list">Graph</link>&#32;*<link linkend="_graphs_8c_1a7b16e36ae5b60ab0f6e1c6e8feaaf381">getVerticesFromDatabase</link>()&#32;{
<anchor xml:id="_graphs_8c_source_1l00380"/>00380 &#32;&#32;&#32;&#32;<link linkend="_struct_graph_list">Graph</link>&#32;*vertices&#32;=&#32;NULL,&#32;*stack&#32;=&#32;NULL;
<anchor xml:id="_graphs_8c_source_1l00381"/>00381 &#32;&#32;&#32;&#32;<link linkend="_struct_aux_list">Aux</link>&#32;*<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>&#32;=&#32;NULL;
<anchor xml:id="_graphs_8c_source_1l00382"/>00382 &#32;&#32;&#32;&#32;FILE&#32;*fp;
<anchor xml:id="_graphs_8c_source_1l00383"/>00383 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex,&#32;id,&#32;currentBattery;
<anchor xml:id="_graphs_8c_source_1l00384"/>00384 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;batteryCapacity,&#32;autonomy,&#32;price;
<anchor xml:id="_graphs_8c_source_1l00385"/>00385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;brand[20],&#32;model[20],&#32;gpsTracker[50];
<anchor xml:id="_graphs_8c_source_1l00386"/>00386 
<anchor xml:id="_graphs_8c_source_1l00387"/>00387 &#32;&#32;&#32;&#32;fp&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;../databases/vertices_database.txt&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00388"/>00388 
<anchor xml:id="_graphs_8c_source_1l00389"/>00389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fp&#32;==&#32;NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;vertices;
<anchor xml:id="_graphs_8c_source_1l00390"/>00390 
<anchor xml:id="_graphs_8c_source_1l00391"/>00391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_global_8h_1ae7f7fdd55d053ad019b98ea0bd1001f6">isFileEmpty</link>(<emphasis role="stringliteral">&quot;../databases/vertices_database.txt&quot;</emphasis>)&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;vertices;
<anchor xml:id="_graphs_8c_source_1l00392"/>00392 
<anchor xml:id="_graphs_8c_source_1l00393"/>00393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!feof(fp))&#32;{
<anchor xml:id="_graphs_8c_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>&#32;=&#32;malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_aux_list">Aux</link>));
<anchor xml:id="_graphs_8c_source_1l00395"/>00395 
<anchor xml:id="_graphs_8c_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>&#32;==&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(stack&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_graph_list">Graph</link>&#32;*next&#32;=&#32;stack-&gt;<link linkend="_struct_graph_list_1adb45c91a9338152d0e202d886d30d001">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(stack);
<anchor xml:id="_graphs_8c_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack&#32;=&#32;next;
<anchor xml:id="_graphs_8c_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00402"/>00402 
<anchor xml:id="_graphs_8c_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fclose(fp);
<anchor xml:id="_graphs_8c_source_1l00404"/>00404 
<anchor xml:id="_graphs_8c_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vertices;
<anchor xml:id="_graphs_8c_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00407"/>00407 
<anchor xml:id="_graphs_8c_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fscanf(fp,&#32;<emphasis role="stringliteral">&quot;Vertex:%d;Id:%d;BatteryCap:%f;CurrBattery:%d;Autonomy:%f;Price:%f;Brand:%[^;];Model:%[^;];GPS:%[^;\n];\n&quot;</emphasis>,&#32;&amp;vertex,&#32;&amp;<emphasis role="keywordtype">id</emphasis>,&#32;&amp;batteryCapacity,&#32;&amp;currentBattery,&#32;&amp;autonomy,&#32;&amp;price,&#32;brand,&#32;model,&#32;gpsTracker)&#32;==&#32;9)&#32;{
<anchor xml:id="_graphs_8c_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a7441ef0865bcb3db9b8064dd7375c1ea">id</link>&#32;=&#32;id;
<anchor xml:id="_graphs_8c_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a43a6e4be8d45c1a00a55a11d095c0399">batteryCapacity</link>&#32;=&#32;batteryCapacity;
<anchor xml:id="_graphs_8c_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1aa0fb27feb593e8a6f2c20fa92b2466cf">currentBattery</link>&#32;=&#32;currentBattery;
<anchor xml:id="_graphs_8c_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a83cda76233a2b02dcc2b3707fa58e4e8">autonomy</link>&#32;=&#32;autonomy;
<anchor xml:id="_graphs_8c_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a500426aec97889b7572f25ae45c06a8d">price</link>&#32;=&#32;price;
<anchor xml:id="_graphs_8c_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strcpy(<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a19d9312fa6559481585c37eec00fdccf">brand</link>,&#32;brand);
<anchor xml:id="_graphs_8c_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strcpy(<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a407e8645b05b8866c6aae96539051b4d">model</link>,&#32;model);
<anchor xml:id="_graphs_8c_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strcpy(<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>-&gt;<link linkend="_struct_car_1a28e6925eca319a182388b4d560d9026b">gpsTracker</link>,&#32;gpsTracker);
<anchor xml:id="_graphs_8c_source_1l00417"/>00417 
<anchor xml:id="_graphs_8c_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack&#32;=&#32;<link linkend="_graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d">addVertex</link>(stack,&#32;vertex,&#32;*<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>);
<anchor xml:id="_graphs_8c_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_graphs_8c_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(<link linkend="_global_8h_1a3e96a5e238530b20be201de161da2059">car</link>);
<anchor xml:id="_graphs_8c_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_graphs_8c_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00423"/>00423 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00424"/>00424 
<anchor xml:id="_graphs_8c_source_1l00425"/>00425 &#32;&#32;&#32;&#32;fclose(fp);
<anchor xml:id="_graphs_8c_source_1l00426"/>00426 
<anchor xml:id="_graphs_8c_source_1l00427"/>00427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(stack&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices&#32;=&#32;<link linkend="_graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d">addVertex</link>(vertices,&#32;stack-&gt;<link linkend="_struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d">vertex</link>,&#32;stack-&gt;vehicle);
<anchor xml:id="_graphs_8c_source_1l00429"/>00429 
<anchor xml:id="_graphs_8c_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack&#32;=&#32;stack-&gt;nextEntry;
<anchor xml:id="_graphs_8c_source_1l00431"/>00431 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00432"/>00432 
<anchor xml:id="_graphs_8c_source_1l00433"/>00433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vertices;
<anchor xml:id="_graphs_8c_source_1l00434"/>00434 }
<anchor xml:id="_graphs_8c_source_1l00435"/>00435 
<anchor xml:id="_graphs_8c_source_1l00436"/><link linkend="_graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10">00436</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10">printPath</link>(<emphasis role="keywordtype">int</emphasis>*&#32;prev,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex)&#32;{
<anchor xml:id="_graphs_8c_source_1l00437"/>00437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev[vertex]&#32;==&#32;-1)&#32;{
<anchor xml:id="_graphs_8c_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;zona&#32;%d&quot;</emphasis>,&#32;vertex);
<anchor xml:id="_graphs_8c_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_graphs_8c_source_1l00440"/>00440 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00441"/>00441 &#32;&#32;&#32;&#32;<link linkend="_graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10">printPath</link>(prev,&#32;prev[vertex]);
<anchor xml:id="_graphs_8c_source_1l00442"/>00442 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;-&#32;zona&#32;%d&quot;</emphasis>,&#32;vertex);
<anchor xml:id="_graphs_8c_source_1l00443"/>00443 }
<anchor xml:id="_graphs_8c_source_1l00444"/>00444 
<anchor xml:id="_graphs_8c_source_1l00445"/><link linkend="_graphs_8h_1a2ed81c359a9efd1ca6a593c2bf5c164a">00445</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_graphs_8c_1a2567f00cf862f6b328838a2adebec53e">getShortestPath</link>(<link linkend="_struct_graph_list">Graph</link>*&#32;graph,&#32;<link linkend="_struct_edge_list">Edge</link>*&#32;edge,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startVertex,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVertices)&#32;{
<anchor xml:id="_graphs_8c_source_1l00446"/>00446 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;distances[<link linkend="_graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167">MAX_VERTICES</link>];
<anchor xml:id="_graphs_8c_source_1l00447"/>00447 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prev[<link linkend="_graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167">MAX_VERTICES</link>];
<anchor xml:id="_graphs_8c_source_1l00448"/>00448 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;visited[<link linkend="_graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167">MAX_VERTICES</link>];
<anchor xml:id="_graphs_8c_source_1l00449"/>00449 
<anchor xml:id="_graphs_8c_source_1l00450"/>00450 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;distances&#32;and&#32;previous&#32;vertices</emphasis>
<anchor xml:id="_graphs_8c_source_1l00451"/>00451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices;&#32;i++)&#32;{
<anchor xml:id="_graphs_8c_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances[i]&#32;=&#32;INT_MAX;
<anchor xml:id="_graphs_8c_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev[i]&#32;=&#32;-1;
<anchor xml:id="_graphs_8c_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visited[i]&#32;=&#32;0;
<anchor xml:id="_graphs_8c_source_1l00455"/>00455 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00456"/>00456 
<anchor xml:id="_graphs_8c_source_1l00457"/>00457 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;distance&#32;of&#32;start&#32;vertex&#32;to&#32;0</emphasis>
<anchor xml:id="_graphs_8c_source_1l00458"/>00458 &#32;&#32;&#32;&#32;distances[startVertex]&#32;=&#32;0;
<anchor xml:id="_graphs_8c_source_1l00459"/>00459 
<anchor xml:id="_graphs_8c_source_1l00460"/>00460 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;shortest&#32;path&#32;for&#32;all&#32;vertices</emphasis>
<anchor xml:id="_graphs_8c_source_1l00461"/>00461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numVertices&#32;-&#32;1;&#32;i++)&#32;{
<anchor xml:id="_graphs_8c_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;vertex&#32;with&#32;the&#32;minimum&#32;distance</emphasis>
<anchor xml:id="_graphs_8c_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minDistance&#32;=&#32;INT_MAX;
<anchor xml:id="_graphs_8c_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minVertex&#32;=&#32;-1;
<anchor xml:id="_graphs_8c_source_1l00465"/>00465 
<anchor xml:id="_graphs_8c_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;numVertices;&#32;j++)&#32;{
<anchor xml:id="_graphs_8c_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!visited[j]&#32;&amp;&amp;&#32;distances[j]&#32;&lt;&#32;minDistance)&#32;{
<anchor xml:id="_graphs_8c_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minDistance&#32;=&#32;distances[j];
<anchor xml:id="_graphs_8c_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minVertex&#32;=&#32;j;
<anchor xml:id="_graphs_8c_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00472"/>00472 
<anchor xml:id="_graphs_8c_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minVertex&#32;==&#32;-1)&#32;{
<anchor xml:id="_graphs_8c_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_graphs_8c_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00476"/>00476 
<anchor xml:id="_graphs_8c_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mark&#32;the&#32;minimum&#32;distance&#32;vertex&#32;as&#32;visited</emphasis>
<anchor xml:id="_graphs_8c_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visited[minVertex]&#32;=&#32;1;
<anchor xml:id="_graphs_8c_source_1l00479"/>00479 
<anchor xml:id="_graphs_8c_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;distances&#32;of&#32;adjacent&#32;vertices</emphasis>
<anchor xml:id="_graphs_8c_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_edge_list">Edge</link>*&#32;currentEdge&#32;=&#32;edge;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;a&#32;separate&#32;pointer&#32;to&#32;traverse&#32;the&#32;edges</emphasis>
<anchor xml:id="_graphs_8c_source_1l00482"/>00482 
<anchor xml:id="_graphs_8c_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(currentEdge&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_graphs_8c_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;currentEdge-&gt;<link linkend="_struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b">vertexB</link>;
<anchor xml:id="_graphs_8c_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distance&#32;=&#32;currentEdge-&gt;<link linkend="_struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b">distance</link>;
<anchor xml:id="_graphs_8c_source_1l00486"/>00486 
<anchor xml:id="_graphs_8c_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!visited[neighbor]&#32;&amp;&amp;&#32;distances[minVertex]&#32;!=&#32;INT_MAX&#32;&amp;&amp;&#32;distances[minVertex]&#32;+&#32;distance&#32;&lt;&#32;distances[neighbor])&#32;{
<anchor xml:id="_graphs_8c_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances[neighbor]&#32;=&#32;distances[minVertex]&#32;+&#32;distance;
<anchor xml:id="_graphs_8c_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev[neighbor]&#32;=&#32;minVertex;
<anchor xml:id="_graphs_8c_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00491"/>00491 
<anchor xml:id="_graphs_8c_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentEdge&#32;=&#32;currentEdge-&gt;<link linkend="_struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581">nextEntry</link>;
<anchor xml:id="_graphs_8c_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00494"/>00494 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00495"/>00495 
<anchor xml:id="_graphs_8c_source_1l00496"/>00496 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00497"/>00497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;2;&#32;i&#32;&lt;&#32;numVertices;&#32;i++)&#32;{
<anchor xml:id="_graphs_8c_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Rota&#32;mais&#32;rapida:&#32;&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10">printPath</link>(prev,&#32;i);
<anchor xml:id="_graphs_8c_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(%.2fkm)\n&quot;</emphasis>,&#32;distances[i]);
<anchor xml:id="_graphs_8c_source_1l00501"/>00501 &#32;&#32;&#32;&#32;}
<anchor xml:id="_graphs_8c_source_1l00502"/>00502 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>);
<anchor xml:id="_graphs_8c_source_1l00503"/>00503 }
</programlisting></section>
