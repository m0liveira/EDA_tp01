<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="graphs_8h" kind="file" language="C++">
    <compoundname>graphs.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includedby refid="graphs_8c" local="yes">sources/graphs.c</includedby>
    <includedby refid="main_8c" local="yes">sources/main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>headers/graphs.h</label>
        <link refid="graphs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>headers/graphs.h</label>
        <link refid="graphs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sources/graphs.c</label>
        <link refid="graphs_8c"/>
      </node>
      <node id="3">
        <label>sources/main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_aux_list" prot="public">AuxList</innerclass>
    <innerclass refid="struct_edge_list" prot="public">EdgeList</innerclass>
    <innerclass refid="struct_graph_list" prot="public">GraphList</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="graphs_8h_1ae9ab6ee0d1c8faaa44a414ee96431039" prot="public" static="no">
        <type>struct <ref refid="struct_aux_list" kindref="compound">AuxList</ref></type>
        <definition>typedef struct AuxList Aux</definition>
        <argsstring></argsstring>
        <name>Aux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="13" column="5"/>
      </memberdef>
      <memberdef kind="typedef" id="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" prot="public" static="no">
        <type>struct <ref refid="struct_edge_list" kindref="compound">EdgeList</ref></type>
        <definition>typedef struct EdgeList Edge</definition>
        <argsstring></argsstring>
        <name>Edge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="21" column="6"/>
      </memberdef>
      <memberdef kind="typedef" id="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" prot="public" static="no">
        <type>struct <ref refid="struct_graph_list" kindref="compound">GraphList</ref></type>
        <definition>typedef struct GraphList Graph</definition>
        <argsstring></argsstring>
        <name>Graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="28" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="graphs_8h_1af94b6595ac77246b48a3f03fe146a6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isGraphUnique</definition>
        <argsstring>(Graph *startEntry, int id)</argsstring>
        <name>isGraphUnique</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check vertices uniqueness. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the vertice is dupped</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="30" column="5" bodyfile="sources/graphs.c" bodystart="20" bodyend="28" declfile="headers/graphs.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1ae350462ced1dc7ba74592037e3c9d88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
        <definition>Graph * addVertex</definition>
        <argsstring>(Graph *startEntry, int id, Aux vehicle)</argsstring>
        <name>addVertex</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1ae9ab6ee0d1c8faaa44a414ee96431039" kindref="member">Aux</ref></type>
          <declname>vehicle</declname>
        </param>
        <briefdescription>
<para>Adds vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new vertex entry into a linked list that represents a graph</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vehicle</parametername>
</parameternamelist>
<parameterdescription>
<para>*vehicle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="31" column="7" bodyfile="sources/graphs.c" bodystart="39" bodyend="66" declfile="headers/graphs.h" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a638753f6469282e3b39c8286813cfd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float generateRandomDistance</definition>
        <argsstring>()</argsstring>
        <name>generateRandomDistance</name>
        <briefdescription>
<para>Generator random distance. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a random distance that is going to be used as the length of the graph edges</para>
<para><simplesect kind="return"><para>distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="32" column="7" bodyfile="sources/graphs.c" bodystart="76" bodyend="81" declfile="headers/graphs.h" declline="32" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1adc3948acb11d8597092ee47d0a6e8f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int doesVertexExist</definition>
        <argsstring>(Graph *graph, int vertex)</argsstring>
        <name>doesVertexExist</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
<para>Check vertices existence. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the given vertex exists</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="33" column="5" bodyfile="sources/graphs.c" bodystart="92" bodyend="100" declfile="headers/graphs.h" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1af72fe49941374d635aff9d7526fc7565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
        <definition>Edge * AddEdge</definition>
        <argsstring>(Graph *graph, Edge *startEntry, int startVertex, int endVertex)</argsstring>
        <name>AddEdge</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endVertex</declname>
        </param>
        <briefdescription>
<para>Adds edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new edge entry into a linked list to complete a graph</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Edge</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>startVertex</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vehicle</parametername>
</parameternamelist>
<parameterdescription>
<para>*vehicle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>edges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="34" column="6" bodyfile="sources/graphs.c" bodystart="111" bodyend="139" declfile="headers/graphs.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a3c2e0335cdd5b4448a77337f76c11022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isEdgePresent</definition>
        <argsstring>(Graph *graph, Edge *edge, int vertexA, int vertexB)</argsstring>
        <name>isEdgePresent</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertexA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertexB</declname>
        </param>
        <briefdescription>
<para>Checks edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if an edge exists</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Edge</parametername>
</parameternamelist>
<parameterdescription>
<para>*edge</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>vertexA</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>vertexB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="35" column="5" bodyfile="sources/graphs.c" bodystart="150" bodyend="161" declfile="headers/graphs.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a0cb364c7e705c406ebe537678438911a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
        <definition>Edge * generateRandomGraph</definition>
        <argsstring>(Graph *graph, Edge *edge, int numVertices, int numEdges)</argsstring>
        <name>generateRandomGraph</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVertices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numEdges</declname>
        </param>
        <briefdescription>
<para>Generates Graphs. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a random graph dynamically from the number of existent vertices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Edge</parametername>
</parameternamelist>
<parameterdescription>
<para>*edge</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>numVertices</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>numEdges </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>edges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="36" column="6" bodyfile="sources/graphs.c" bodystart="172" bodyend="212" declfile="headers/graphs.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a3ab9e14d9194e69df48f70def6d45370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void listGraph</definition>
        <argsstring>(Graph *startEntry, Edge *startEdge)</argsstring>
        <name>listGraph</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>startEdge</declname>
        </param>
        <briefdescription>
<para>List graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs graph vertices and edges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="37" column="6" bodyfile="sources/graphs.c" bodystart="222" bodyend="252" declfile="headers/graphs.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1aae6d29c48d0d248e16014ef35b50a5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void listZones</definition>
        <argsstring>(Graph *startEntry)</argsstring>
        <name>listZones</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>List zones. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs graph vertices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="38" column="6" bodyfile="sources/graphs.c" bodystart="262" bodyend="275" declfile="headers/graphs.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a17abe0cb34456a08730810427bdcf20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void listVehiclesByZone</definition>
        <argsstring>(Graph *startEntry, int zone)</argsstring>
        <name>listVehiclesByZone</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zone</declname>
        </param>
        <briefdescription>
<para>List cars by zones. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs graph vertices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="39" column="6" bodyfile="sources/graphs.c" bodystart="285" bodyend="303" declfile="headers/graphs.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1aa65bd12637311f31250ec4d793db7574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveVerticesOnDatabase</definition>
        <argsstring>(Graph *startEntry)</argsstring>
        <name>saveVerticesOnDatabase</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>Save vertices on database. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves vertices entrys into a database</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="40" column="5" bodyfile="sources/graphs.c" bodystart="314" bodyend="333" declfile="headers/graphs.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a860928daf7c19aa0b0a0ba64e780f8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveVerticesOnBinaryDatabase</definition>
        <argsstring>(Graph *startEntry)</argsstring>
        <name>saveVerticesOnBinaryDatabase</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>Save vertices on a binary database. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves vertices entrys into a binary database</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="41" column="5" bodyfile="sources/graphs.c" bodystart="344" bodyend="369" declfile="headers/graphs.h" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a7b16e36ae5b60ab0f6e1c6e8feaaf381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
        <definition>Graph * getVerticesFromDatabase</definition>
        <argsstring>()</argsstring>
        <name>getVerticesFromDatabase</name>
        <briefdescription>
<para>Get vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets all vertices from a database</para>
<para><simplesect kind="return"><para>vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="42" column="7" bodyfile="sources/graphs.c" bodystart="379" bodyend="434" declfile="headers/graphs.h" declline="42" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8h_1a2ed81c359a9efd1ca6a593c2bf5c164a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getShortestPath</definition>
        <argsstring>(Graph *startEntry, Edge *edge, int startVertex, int numOfVertices)</argsstring>
        <name>getShortestPath</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numOfVertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/graphs.h" line="43" column="6" bodyfile="sources/graphs.c" bodystart="445" bodyend="503" declfile="headers/graphs.h" declline="43" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="struct_aux_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_aux_list" kindref="compound">AuxList</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="5" refid="struct_aux_list_1a43a6e4be8d45c1a00a55a11d095c0399" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a43a6e4be8d45c1a00a55a11d095c0399" kindref="member">batteryCapacity</ref>;</highlight></codeline>
<codeline lineno="6" refid="struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf" kindref="member">currentBattery</ref>;</highlight></codeline>
<codeline lineno="7" refid="struct_aux_list_1a83cda76233a2b02dcc2b3707fa58e4e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a83cda76233a2b02dcc2b3707fa58e4e8" kindref="member">autonomy</ref>;</highlight></codeline>
<codeline lineno="8" refid="struct_aux_list_1a500426aec97889b7572f25ae45c06a8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a500426aec97889b7572f25ae45c06a8d" kindref="member">price</ref>;</highlight></codeline>
<codeline lineno="9" refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>[20];</highlight></codeline>
<codeline lineno="10" refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>[20];</highlight></codeline>
<codeline lineno="11" refid="struct_aux_list_1a28e6925eca319a182388b4d560d9026b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_aux_list_1a28e6925eca319a182388b4d560d9026b" kindref="member">gpsTracker</ref>[50];</highlight></codeline>
<codeline lineno="12" refid="struct_aux_list_1ae0cb185ade32e7edefa337ba3cc1fbcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_aux_list" kindref="compound">AuxList</ref>*<sp/><ref refid="struct_aux_list_1ae0cb185ade32e7edefa337ba3cc1fbcf" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="13" refid="graphs_8h_1ae9ab6ee0d1c8faaa44a414ee96431039" refkind="member"><highlight class="normal">}<sp/><ref refid="graphs_8h_1ae9ab6ee0d1c8faaa44a414ee96431039" kindref="member">Aux</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="struct_edge_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_edge_list" kindref="compound">EdgeList</ref><sp/>{</highlight></codeline>
<codeline lineno="16" refid="struct_edge_list_1a7441ef0865bcb3db9b8064dd7375c1ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_edge_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="17" refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" kindref="member">vertexA</ref>;</highlight></codeline>
<codeline lineno="18" refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref>;</highlight></codeline>
<codeline lineno="19" refid="struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b" kindref="member">distance</ref>;</highlight></codeline>
<codeline lineno="20" refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_edge_list" kindref="compound">EdgeList</ref>*<sp/><ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="21" refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" refkind="member"><highlight class="normal">}<sp/><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_graph_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_graph_list" kindref="compound">GraphList</ref><sp/>{</highlight></codeline>
<codeline lineno="24" refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>;</highlight></codeline>
<codeline lineno="25" refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_aux_list" kindref="compound">Aux</ref><sp/><ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>;</highlight></codeline>
<codeline lineno="26" refid="struct_graph_list_1a4d8765cd8f9ea719658270501587af37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref>*<sp/><ref refid="struct_graph_list_1a4d8765cd8f9ea719658270501587af37" kindref="member">edge</ref>;</highlight></codeline>
<codeline lineno="27" refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_graph_list" kindref="compound">GraphList</ref>*<sp/><ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="28" refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" refkind="member"><highlight class="normal">}<sp/><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1af94b6595ac77246b48a3f03fe146a6d3" kindref="member">isGraphUnique</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*<ref refid="graphs_8h_1ae350462ced1dc7ba74592037e3c9d88d" kindref="member">addVertex</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct_aux_list" kindref="compound">Aux</ref><sp/><ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1a638753f6469282e3b39c8286813cfd34" kindref="member">generateRandomDistance</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1adc3948acb11d8597092ee47d0a6e8f7c" kindref="member">doesVertexExist</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="graphs_8h_1af72fe49941374d635aff9d7526fc7565" kindref="member">AddEdge</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startVertex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endVertex);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1a3c2e0335cdd5b4448a77337f76c11022" kindref="member">isEdgePresent</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="struct_graph_list_1a4d8765cd8f9ea719658270501587af37" kindref="member">edge</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertexA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertexB);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="graphs_8h_1a0cb364c7e705c406ebe537678438911a" kindref="member">generateRandomGraph</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="struct_graph_list_1a4d8765cd8f9ea719658270501587af37" kindref="member">edge</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVertices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numEdges);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1a3ab9e14d9194e69df48f70def6d45370" kindref="member">listGraph</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*startEdge);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1aae6d29c48d0d248e16014ef35b50a5ea" kindref="member">listZones</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1a17abe0cb34456a08730810427bdcf20d" kindref="member">listVehiclesByZone</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zone);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1aa65bd12637311f31250ec4d793db7574" kindref="member">saveVerticesOnDatabase</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1a860928daf7c19aa0b0a0ba64e780f8aa" kindref="member">saveVerticesOnBinaryDatabase</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*<ref refid="graphs_8h_1a7b16e36ae5b60ab0f6e1c6e8feaaf381" kindref="member">getVerticesFromDatabase</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8h_1a2ed81c359a9efd1ca6a593c2bf5c164a" kindref="member">getShortestPath</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="struct_graph_list_1a4d8765cd8f9ea719658270501587af37" kindref="member">edge</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startVertex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numOfVertices);</highlight></codeline>
    </programlisting>
    <location file="headers/graphs.h"/>
  </compounddef>
</doxygen>
