<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="graphs_8c" kind="file" language="C++">
    <compoundname>graphs.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">limits.h</includes>
    <includes refid="global_8h" local="yes">../headers/global.h</includes>
    <includes refid="graphs_8h" local="yes">../headers/graphs.h</includes>
    <incdepgraph>
      <node id="7">
        <label>../headers/global.h</label>
        <link refid="global_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../headers/graphs.h</label>
        <link refid="graphs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>sources/graphs.c</label>
        <link refid="graphs_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>time.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167" prot="public" static="no">
        <name>MAX_VERTICES</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="9" column="9" bodyfile="sources/graphs.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="graphs_8c_1af94b6595ac77246b48a3f03fe146a6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isGraphUnique</definition>
        <argsstring>(Graph *startEntry, int id)</argsstring>
        <name>isGraphUnique</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check vertices uniqueness. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the vertice is dupped</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="20" column="5" bodyfile="sources/graphs.c" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
        <definition>Graph * addVertex</definition>
        <argsstring>(Graph *startEntry, int id, Aux vehicle)</argsstring>
        <name>addVertex</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1ae9ab6ee0d1c8faaa44a414ee96431039" kindref="member">Aux</ref></type>
          <declname>vehicle</declname>
        </param>
        <briefdescription>
<para>Adds vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new vertex entry into a linked list that represents a graph</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vehicle</parametername>
</parameternamelist>
<parameterdescription>
<para>*vehicle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="39" column="7" bodyfile="sources/graphs.c" bodystart="39" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a638753f6469282e3b39c8286813cfd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float generateRandomDistance</definition>
        <argsstring>()</argsstring>
        <name>generateRandomDistance</name>
        <briefdescription>
<para>Generator random distance. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a random distance that is going to be used as the length of the graph edges</para>
<para><simplesect kind="return"><para>distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="76" column="7" bodyfile="sources/graphs.c" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int doesVertexExist</definition>
        <argsstring>(Graph *graph, int vertex)</argsstring>
        <name>doesVertexExist</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
<para>Check vertices existence. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the given vertex exists</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="92" column="5" bodyfile="sources/graphs.c" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1af72fe49941374d635aff9d7526fc7565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
        <definition>Edge * AddEdge</definition>
        <argsstring>(Graph *graph, Edge *startEntry, int startVertex, int endVertex)</argsstring>
        <name>AddEdge</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endVertex</declname>
        </param>
        <briefdescription>
<para>Adds edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new edge entry into a linked list to complete a graph</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Edge</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>startVertex</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vehicle</parametername>
</parameternamelist>
<parameterdescription>
<para>*vehicle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>edges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="111" column="6" bodyfile="sources/graphs.c" bodystart="111" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a3c2e0335cdd5b4448a77337f76c11022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isEdgePresent</definition>
        <argsstring>(Graph *graph, Edge *edge, int vertexA, int vertexB)</argsstring>
        <name>isEdgePresent</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertexA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertexB</declname>
        </param>
        <briefdescription>
<para>Checks edges. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if an edge exists</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Edge</parametername>
</parameternamelist>
<parameterdescription>
<para>*edge</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>vertexA</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>vertexB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="150" column="5" bodyfile="sources/graphs.c" bodystart="150" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a0cb364c7e705c406ebe537678438911a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
        <definition>Edge * generateRandomGraph</definition>
        <argsstring>(Graph *graph, Edge *edge, int numVertices, int numEdges)</argsstring>
        <name>generateRandomGraph</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVertices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numEdges</declname>
        </param>
        <briefdescription>
<para>Generates Graphs. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a random graph dynamically from the number of existent vertices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*graph</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Edge</parametername>
</parameternamelist>
<parameterdescription>
<para>*edge</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>numVertices</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>numEdges </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>edges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="172" column="6" bodyfile="sources/graphs.c" bodystart="172" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a3ab9e14d9194e69df48f70def6d45370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void listGraph</definition>
        <argsstring>(Graph *startEntry, Edge *startEdge)</argsstring>
        <name>listGraph</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>startEdge</declname>
        </param>
        <briefdescription>
<para>List graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs graph vertices and edges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="222" column="6" bodyfile="sources/graphs.c" bodystart="222" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1aae6d29c48d0d248e16014ef35b50a5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void listZones</definition>
        <argsstring>(Graph *startEntry)</argsstring>
        <name>listZones</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>List zones. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs graph vertices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="262" column="6" bodyfile="sources/graphs.c" bodystart="262" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a17abe0cb34456a08730810427bdcf20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void listVehiclesByZone</definition>
        <argsstring>(Graph *startEntry, int zone)</argsstring>
        <name>listVehiclesByZone</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zone</declname>
        </param>
        <briefdescription>
<para>List cars by zones. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs graph vertices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="285" column="6" bodyfile="sources/graphs.c" bodystart="285" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1aa65bd12637311f31250ec4d793db7574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveVerticesOnDatabase</definition>
        <argsstring>(Graph *startEntry)</argsstring>
        <name>saveVerticesOnDatabase</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>Save vertices on database. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves vertices entrys into a database</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="314" column="5" bodyfile="sources/graphs.c" bodystart="314" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a860928daf7c19aa0b0a0ba64e780f8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveVerticesOnBinaryDatabase</definition>
        <argsstring>(Graph *startEntry)</argsstring>
        <name>saveVerticesOnBinaryDatabase</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>Save vertices on a binary database. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves vertices entrys into a binary database</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Graph</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="344" column="5" bodyfile="sources/graphs.c" bodystart="344" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a7b16e36ae5b60ab0f6e1c6e8feaaf381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
        <definition>Graph * getVerticesFromDatabase</definition>
        <argsstring>()</argsstring>
        <name>getVerticesFromDatabase</name>
        <briefdescription>
<para>Get vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets all vertices from a database</para>
<para><simplesect kind="return"><para>vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="379" column="7" bodyfile="sources/graphs.c" bodystart="379" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printPath</definition>
        <argsstring>(int *prev, int vertex)</argsstring>
        <name>printPath</name>
        <param>
          <type>int *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="436" column="6" bodyfile="sources/graphs.c" bodystart="436" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="graphs_8c_1a2567f00cf862f6b328838a2adebec53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getShortestPath</definition>
        <argsstring>(Graph *graph, Edge *edge, int startVertex, int numVertices)</argsstring>
        <name>getShortestPath</name>
        <param>
          <type><ref refid="graphs_8h_1af8faa00bf97d63050ab962a459d43e1c" kindref="member">Graph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="graphs_8h_1a1e1861e76bc30ba26d89c654b520ae16" kindref="member">Edge</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/graphs.c" line="445" column="6" bodyfile="sources/graphs.c" bodystart="445" bodyend="503"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../headers/global.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../headers/graphs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_VERTICES<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="graphs_8h_1af94b6595ac77246b48a3f03fe146a6d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1af94b6595ac77246b48a3f03fe146a6d3" kindref="member">isGraphUnique</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref><sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="graphs_8h_1ae350462ced1dc7ba74592037e3c9d88d" refkind="member"><highlight class="normal"><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*<ref refid="graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d" kindref="member">addVertex</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct_aux_list" kindref="compound">Aux</ref><sp/>vehicle)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="graphs_8c_1af94b6595ac77246b48a3f03fe146a6d3" kindref="member">isGraphUnique</ref>(startEntry,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nErro:<sp/>Este<sp/>vertice<sp/>ja<sp/>foi<sp/>registado!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(startEntry);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*newEntry<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_graph_list" kindref="compound">GraphList</ref>));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref><sp/>=<sp/>vehicle;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newEntry;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*currentEntry<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry<sp/>=<sp/>currentEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref><sp/>=<sp/>newEntry;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startEntry;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="graphs_8h_1a638753f6469282e3b39c8286813cfd34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a638753f6469282e3b39c8286813cfd34" kindref="member">generateRandomDistance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>a<sp/>random<sp/>distance<sp/>between<sp/>1.0<sp/>and<sp/>10.0<sp/>(you<sp/>can<sp/>adjust<sp/>the<sp/>range<sp/>as<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>(float)(rand()<sp/>%<sp/>1000)<sp/>/<sp/>100.0<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distance;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="graphs_8h_1adc3948acb11d8597092ee47d0a6e8f7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c" kindref="member">doesVertexExist</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertex)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(graph<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref><sp/>==<sp/>vertex)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>graph-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="graphs_8h_1af72fe49941374d635aff9d7526fc7565" refkind="member"><highlight class="normal"><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="graphs_8c_1af72fe49941374d635aff9d7526fc7565" kindref="member">AddEdge</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startVertex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endVertex)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c" kindref="member">doesVertexExist</ref>(graph,<sp/>startVertex)<sp/>&amp;&amp;<sp/><ref refid="graphs_8c_1adc3948acb11d8597092ee47d0a6e8f7c" kindref="member">doesVertexExist</ref>(graph,<sp/>endVertex))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*newEntry<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_edge_list" kindref="compound">EdgeList</ref>));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" kindref="member">vertexA</ref><sp/>=<sp/>startVertex;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref>=<sp/>endVertex;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b" kindref="member">distance</ref><sp/>=<sp/><ref refid="graphs_8c_1a638753f6469282e3b39c8286813cfd34" kindref="member">generateRandomDistance</ref>();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newEntry;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*currentEntry<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentEntry-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry<sp/>=<sp/>currentEntry-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref><sp/>=<sp/>newEntry;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startEntry;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Um<sp/>dos<sp/>vertices<sp/>indicados<sp/>nao<sp/>existe<sp/>%d<sp/>-<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>startVertex,<sp/>endVertex);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startEntry;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="graphs_8h_1a3c2e0335cdd5b4448a77337f76c11022" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a3c2e0335cdd5b4448a77337f76c11022" kindref="member">isEdgePresent</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*edge,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertexA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertexB)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(edge<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((edge-&gt;<ref refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" kindref="member">vertexA</ref><sp/>==<sp/>vertexA<sp/>&amp;&amp;<sp/>edge-&gt;<ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref><sp/>==<sp/>vertexB)<sp/>||</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(edge-&gt;<ref refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" kindref="member">vertexA</ref><sp/>==<sp/>vertexB<sp/>&amp;&amp;<sp/>edge-&gt;<ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref><sp/>==<sp/>vertexA))<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>edge-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="graphs_8h_1a0cb364c7e705c406ebe537678438911a" refkind="member"><highlight class="normal"><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*<ref refid="graphs_8c_1a0cb364c7e705c406ebe537678438911a" kindref="member">generateRandomGraph</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*edge,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVertices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numEdges)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVertices<sp/>&lt;=<sp/>0<sp/>||<sp/>numEdges<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numEdges<sp/>&gt;<sp/>numVertices<sp/>*<sp/>(numVertices<sp/>-<sp/>1)<sp/>/<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*vertices<sp/>=<sp/>malloc(numVertices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVertices;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[i]<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>numVertices<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>rand()<sp/>%<sp/>(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>vertices[i];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[i]<sp/>=<sp/>vertices[j];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[j]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainingEdges<sp/>=<sp/>numEdges;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVertices<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>numEdges<sp/>&gt;<sp/>0;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>%<sp/>numVertices;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/><ref refid="graphs_8c_1af72fe49941374d635aff9d7526fc7565" kindref="member">AddEdge</ref>(graph,<sp/>edge,<sp/>vertices[i],<sp/>vertices[j]);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainingEdges--;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remainingEdges<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randomVertexA<sp/>=<sp/>vertices[rand()<sp/>%<sp/>numVertices];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randomVertexB<sp/>=<sp/>vertices[rand()<sp/>%<sp/>numVertices];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(randomVertexA<sp/>!=<sp/>randomVertexB<sp/>&amp;&amp;<sp/>!<ref refid="graphs_8c_1a3c2e0335cdd5b4448a77337f76c11022" kindref="member">isEdgePresent</ref>(graph,<sp/>edge,<sp/>randomVertexA,<sp/>randomVertexB))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/><ref refid="graphs_8c_1af72fe49941374d635aff9d7526fc7565" kindref="member">AddEdge</ref>(graph,<sp/>edge,<sp/>randomVertexA,<sp/>randomVertexB);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainingEdges--;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>free(vertices);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="graphs_8h_1a3ab9e14d9194e69df48f70def6d45370" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a3ab9e14d9194e69df48f70def6d45370" kindref="member">listGraph</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*startEdge)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Nao<sp/>ha<sp/>vertices<sp/>guardados\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Mapa!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nZona:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Veiculo:<sp/>%s<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Bateria:<sp/>%d%%\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf" kindref="member">currentBattery</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref><sp/>*newEdge<sp/>=<sp/>startEdge;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hasEdges<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(newEdge<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref><sp/>==<sp/>newEdge-&gt;<ref refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" kindref="member">vertexA</ref><sp/>||<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref><sp/>==<sp/>newEdge-&gt;<ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref>){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Zonas<sp/>conectadas:<sp/>%d<sp/>-<sp/>%d,<sp/>Distancia:<sp/>%.2fkm\n&quot;</highlight><highlight class="normal">,<sp/>newEdge-&gt;<ref refid="struct_edge_list_1aff105884864d9eb93769b4323f180562" kindref="member">vertexA</ref>,<sp/>newEdge-&gt;<ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref>,<sp/>newEdge-&gt;<ref refid="struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b" kindref="member">distance</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasEdges<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEdge<sp/>=<sp/>newEdge-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasEdges<sp/>==<sp/>0)<sp/>printf(</highlight><highlight class="stringliteral">&quot;Nao<sp/>esta<sp/>conectado<sp/>a<sp/>outro<sp/>vertice!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="graphs_8h_1aae6d29c48d0d248e16014ef35b50a5ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1aae6d29c48d0d248e16014ef35b50a5ea" kindref="member">listZones</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Nao<sp/>ha<sp/>vertices<sp/>guardados\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Mapa!\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Zona:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="graphs_8h_1a17abe0cb34456a08730810427bdcf20d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a17abe0cb34456a08730810427bdcf20d" kindref="member">listVehiclesByZone</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zone)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Nao<sp/>ha<sp/>vertices<sp/>guardados\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Veiculos<sp/>num<sp/>raio<sp/>de<sp/>%d<sp/>zonas!\n\n&quot;</highlight><highlight class="normal">,<sp/>zone);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref><sp/>&lt;=<sp/>zone)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Id:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Veiculo:<sp/>%s<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Preco:<sp/>%.2f<sp/>euros\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a500426aec97889b7572f25ae45c06a8d" kindref="member">price</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Bateria:<sp/>%d%%\n\n&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf" kindref="member">currentBattery</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="graphs_8h_1aa65bd12637311f31250ec4d793db7574" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1aa65bd12637311f31250ec4d793db7574" kindref="member">saveVerticesOnDatabase</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry){</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*aux<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;../databases/vertices_database.txt&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;vertex:%d&quot;</highlight><highlight class="normal">,<sp/>startEntry-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Vertex:%d;Id:%d;BatteryCap:%.2f;CurrBattery:%d;Autonomy:%.2f;Price:%.2f;Brand:%s;Model:%s;GPS:%s;\n&quot;</highlight><highlight class="normal">,<sp/>aux-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a43a6e4be8d45c1a00a55a11d095c0399" kindref="member">batteryCapacity</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf" kindref="member">currentBattery</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a83cda76233a2b02dcc2b3707fa58e4e8" kindref="member">autonomy</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a500426aec97889b7572f25ae45c06a8d" kindref="member">price</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>,<sp/>aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a28e6925eca319a182388b4d560d9026b" kindref="member">gpsTracker</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="graphs_8h_1a860928daf7c19aa0b0a0ba64e780f8aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a860928daf7c19aa0b0a0ba64e780f8aa" kindref="member">saveVerticesOnBinaryDatabase</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*startEntry)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*aux<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;../databases/vertices_database.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a43a6e4be8d45c1a00a55a11d095c0399" kindref="member">batteryCapacity</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1aa0fb27feb593e8a6f2c20fa92b2466cf" kindref="member">currentBattery</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a83cda76233a2b02dcc2b3707fa58e4e8" kindref="member">autonomy</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a500426aec97889b7572f25ae45c06a8d" kindref="member">price</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>strlen(aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>)<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>strlen(aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>)<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a28e6925eca319a182388b4d560d9026b" kindref="member">gpsTracker</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>strlen(aux-&gt;<ref refid="struct_graph_list_1a5095800e7feb0f0af9903d03529c8b72" kindref="member">vehicle</ref>.<ref refid="struct_aux_list_1a28e6925eca319a182388b4d560d9026b" kindref="member">gpsTracker</ref>)<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="graphs_8h_1a7b16e36ae5b60ab0f6e1c6e8feaaf381" refkind="member"><highlight class="normal"><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*<ref refid="graphs_8c_1a7b16e36ae5b60ab0f6e1c6e8feaaf381" kindref="member">getVerticesFromDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*vertices<sp/>=<sp/>NULL,<sp/>*stack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_aux_list" kindref="compound">Aux</ref><sp/>*<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertex,<sp/>id,<sp/>currentBattery;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>batteryCapacity,<sp/>autonomy,<sp/>price;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>brand[20],<sp/>model[20],<sp/>gpsTracker[50];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;../databases/vertices_database.txt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertices;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global_8h_1ae7f7fdd55d053ad019b98ea0bd1001f6" kindref="member">isFileEmpty</ref>(</highlight><highlight class="stringliteral">&quot;../databases/vertices_database.txt&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertices;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(fp))<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_aux_list" kindref="compound">Aux</ref>));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stack<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_graph_list" kindref="compound">Graph</ref><sp/>*next<sp/>=<sp/>stack-&gt;<ref refid="struct_graph_list_1adb45c91a9338152d0e202d886d30d001" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(stack);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertices;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf(fp,<sp/></highlight><highlight class="stringliteral">&quot;Vertex:%d;Id:%d;BatteryCap:%f;CurrBattery:%d;Autonomy:%f;Price:%f;Brand:%[^;];Model:%[^;];GPS:%[^;\n];\n&quot;</highlight><highlight class="normal">,<sp/>&amp;vertex,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>&amp;batteryCapacity,<sp/>&amp;currentBattery,<sp/>&amp;autonomy,<sp/>&amp;price,<sp/>brand,<sp/>model,<sp/>gpsTracker)<sp/>==<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a43a6e4be8d45c1a00a55a11d095c0399" kindref="member">batteryCapacity</ref><sp/>=<sp/>batteryCapacity;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1aa0fb27feb593e8a6f2c20fa92b2466cf" kindref="member">currentBattery</ref><sp/>=<sp/>currentBattery;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a83cda76233a2b02dcc2b3707fa58e4e8" kindref="member">autonomy</ref><sp/>=<sp/>autonomy;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a500426aec97889b7572f25ae45c06a8d" kindref="member">price</ref><sp/>=<sp/>price;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a19d9312fa6559481585c37eec00fdccf" kindref="member">brand</ref>,<sp/>brand);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a407e8645b05b8866c6aae96539051b4d" kindref="member">model</ref>,<sp/>model);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>-&gt;<ref refid="struct_car_1a28e6925eca319a182388b4d560d9026b" kindref="member">gpsTracker</ref>,<sp/>gpsTracker);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/><ref refid="graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d" kindref="member">addVertex</ref>(stack,<sp/>vertex,<sp/>*<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="global_8h_1a3e96a5e238530b20be201de161da2059" kindref="member">car</ref>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stack<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices<sp/>=<sp/><ref refid="graphs_8c_1ae350462ced1dc7ba74592037e3c9d88d" kindref="member">addVertex</ref>(vertices,<sp/>stack-&gt;<ref refid="struct_graph_list_1a7b6a73a9ea2850e455702ad082701c9d" kindref="member">vertex</ref>,<sp/>stack-&gt;vehicle);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/>stack-&gt;nextEntry;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertices;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10" kindref="member">printPath</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>prev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertex)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev[vertex]<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;zona<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>vertex);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10" kindref="member">printPath</ref>(prev,<sp/>prev[vertex]);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>zona<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>vertex);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="graphs_8h_1a2ed81c359a9efd1ca6a593c2bf5c164a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphs_8c_1a2567f00cf862f6b328838a2adebec53e" kindref="member">getShortestPath</ref>(<ref refid="struct_graph_list" kindref="compound">Graph</ref>*<sp/>graph,<sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref>*<sp/>edge,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startVertex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVertices)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distances[<ref refid="graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167" kindref="member">MAX_VERTICES</ref>];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev[<ref refid="graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167" kindref="member">MAX_VERTICES</ref>];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>visited[<ref refid="graphs_8c_1a0fdb7b933ef091574ff57d1f36dd4167" kindref="member">MAX_VERTICES</ref>];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>distances<sp/>and<sp/>previous<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVertices;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances[i]<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>distance<sp/>of<sp/>start<sp/>vertex<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>distances[startVertex]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>shortest<sp/>path<sp/>for<sp/>all<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVertices<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>vertex<sp/>with<sp/>the<sp/>minimum<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minDistance<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minVertex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numVertices;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visited[j]<sp/>&amp;&amp;<sp/>distances[j]<sp/>&lt;<sp/>minDistance)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance<sp/>=<sp/>distances[j];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minVertex<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minVertex<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>minimum<sp/>distance<sp/>vertex<sp/>as<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited[minVertex]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>distances<sp/>of<sp/>adjacent<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_edge_list" kindref="compound">Edge</ref>*<sp/>currentEdge<sp/>=<sp/>edge;<sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>separate<sp/>pointer<sp/>to<sp/>traverse<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentEdge<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbor<sp/>=<sp/>currentEdge-&gt;<ref refid="struct_edge_list_1a8af3b87d94b267ef0e237180b1ab5c8b" kindref="member">vertexB</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>currentEdge-&gt;<ref refid="struct_edge_list_1a06f14a9abd47b91465f895d5259cdc1b" kindref="member">distance</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visited[neighbor]<sp/>&amp;&amp;<sp/>distances[minVertex]<sp/>!=<sp/>INT_MAX<sp/>&amp;&amp;<sp/>distances[minVertex]<sp/>+<sp/>distance<sp/>&lt;<sp/>distances[neighbor])<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances[neighbor]<sp/>=<sp/>distances[minVertex]<sp/>+<sp/>distance;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev[neighbor]<sp/>=<sp/>minVertex;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEdge<sp/>=<sp/>currentEdge-&gt;<ref refid="struct_edge_list_1a1b8105521e3a6a5e9f85c915e3746581" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>numVertices;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Rota<sp/>mais<sp/>rapida:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="graphs_8c_1a3e6dbda9bc77b899aa56bd72d5fd5b10" kindref="member">printPath</ref>(prev,<sp/>i);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>(%.2fkm)\n&quot;</highlight><highlight class="normal">,<sp/>distances[i]);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="sources/graphs.c"/>
  </compounddef>
</doxygen>
