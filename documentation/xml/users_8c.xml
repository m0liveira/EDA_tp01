<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="users_8c" kind="file" language="C++">
    <compoundname>users.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="global_8h" local="yes">../headers/global.h</includes>
    <includes refid="users_8h" local="yes">../headers/users.h</includes>
    <incdepgraph>
      <node id="4">
        <label>../headers/global.h</label>
        <link refid="global_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>../headers/users.h</label>
        <link refid="users_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>sources/users.c</label>
        <link refid="users_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="users_8c_1a3eff6244efefa29ff980a2bd706b8e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isUserUnique</definition>
        <argsstring>(User *startEntry, int id)</argsstring>
        <name>isUserUnique</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Check user ID. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the ID is dupped</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="15" column="5" bodyfile="sources/users.c" bodystart="15" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1ace2066eafefcb27752a21a5da56efecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isNameUnique</definition>
        <argsstring>(User *startEntry, char name[])</argsstring>
        <name>isNameUnique</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>char</type>
          <declname>name</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Check user name. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the user name is dupped</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>name[] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="34" column="5" bodyfile="sources/users.c" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1aae43e4ec2bd4a34eaaa402c89d8eccd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
        <definition>User * addUser</definition>
        <argsstring>(User *startEntry, int id, int nif, float balance, char name[], char password[], char role[])</argsstring>
        <name>addUser</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nif</declname>
        </param>
        <param>
          <type>float</type>
          <declname>balance</declname>
        </param>
        <param>
          <type>char</type>
          <declname>name</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char</type>
          <declname>password</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char</type>
          <declname>role</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Add user. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new user entry into a linked list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>nif</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>float</parametername>
</parameternamelist>
<parameterdescription>
<para>balance</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>name[]</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>password[]</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>role[] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Added user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="53" column="6" bodyfile="sources/users.c" bodystart="53" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1a9724304f5304c5e18783d58daf1e2ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int loginUser</definition>
        <argsstring>(User *startEntry, char name[], char password[])</argsstring>
        <name>loginUser</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>char</type>
          <declname>name</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char</type>
          <declname>password</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>User login. </para>
        </briefdescription>
        <detaileddescription>
<para>Logins a user into the program</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>name[]</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char</parametername>
</parameternamelist>
<parameterdescription>
<para>password[] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="88" column="5" bodyfile="sources/users.c" bodystart="88" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1aa658b85d23db66ac2a2873cc9ee1e3de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveUsersOnDatabase</definition>
        <argsstring>(User *startEntry)</argsstring>
        <name>saveUsersOnDatabase</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>Save user on database. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves user entrys into a database</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="116" column="5" bodyfile="sources/users.c" bodystart="116" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1aa3190709fa215b59580f1e98d4d90fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveUsersOnBinaryDatabase</definition>
        <argsstring>(User *startEntry)</argsstring>
        <name>saveUsersOnBinaryDatabase</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <briefdescription>
<para>Save user on a binary database. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves user entrys into a binary database</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 0 as true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="144" column="5" bodyfile="sources/users.c" bodystart="144" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1a36ad2b37dc9902e37bb2f143f923bffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
        <definition>User * getUsersFromDatabase</definition>
        <argsstring>()</argsstring>
        <name>getUsersFromDatabase</name>
        <briefdescription>
<para>Get Users. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets all users from a database</para>
<para><simplesect kind="return"><para>users </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="176" column="6" bodyfile="sources/users.c" bodystart="176" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1aa7b4e161f2c6c59d4849ce653efd30e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
        <definition>User * deleteUser</definition>
        <argsstring>(User *startEntry, int id)</argsstring>
        <name>deleteUser</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Delete user. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes an user entry from the linked list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>users </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="212" column="6" bodyfile="sources/users.c" bodystart="212" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="users_8c_1ab54a616a3193a2efad78e80b31028430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
        <definition>User * editUser</definition>
        <argsstring>(User *startEntry, int id)</argsstring>
        <name>editUser</name>
        <param>
          <type><ref refid="users_8h_1a5400f33cf0c5c9de937367162462fb55" kindref="member">User</ref> *</type>
          <declname>startEntry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Update user. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates a specified user entry from the linked list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>User</parametername>
</parameternamelist>
<parameterdescription>
<para>*startEntry</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>users </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sources/users.c" line="250" column="6" bodyfile="sources/users.c" bodystart="250" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../headers/global.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../headers/users.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="users_8h_1a3eff6244efefa29ff980a2bd706b8e9b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="users_8c_1a3eff6244efefa29ff980a2bd706b8e9b" kindref="member">isUserUnique</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startEntry-&gt;<ref refid="struct_user_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref><sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="users_8h_1ace2066eafefcb27752a21a5da56efecc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="users_8c_1ace2066eafefcb27752a21a5da56efecc" kindref="member">isNameUnique</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[]){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(startEntry-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>,<sp/>name)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="users_8h_1aae43e4ec2bd4a34eaaa402c89d8eccd1" refkind="member"><highlight class="normal"><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*<ref refid="users_8c_1aae43e4ec2bd4a34eaaa402c89d8eccd1" kindref="member">addUser</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nif,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>balance,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>password[],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>role[]){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*newEntry<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_user_list" kindref="compound">UserList</ref>));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="users_8c_1a3eff6244efefa29ff980a2bd706b8e9b" kindref="member">isUserUnique</ref>(startEntry,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Erro:<sp/>Este<sp/>ID<sp/>ja<sp/>foi<sp/>registado!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(startEntry);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="users_8c_1ace2066eafefcb27752a21a5da56efecc" kindref="member">isNameUnique</ref>(startEntry,<sp/>name)){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Erro:<sp/>Este<sp/>nome<sp/>(%s)<sp/>ja<sp/>foi<sp/>registado!\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(startEntry);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newEntry<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_user_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_user_list_1ad68c6985dce5a3d709f854778dedee19" kindref="member">nif</ref><sp/>=<sp/>nif;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_user_list_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref><sp/>=<sp/>balance;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(newEntry-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>,<sp/>name);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(newEntry-&gt;<ref refid="struct_user_list_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>,<sp/>password);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(newEntry-&gt;<ref refid="struct_user_list_1a8877f22b3d1c2d2dc9f729b8b82291b3" kindref="member">role</ref>,<sp/>role);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref><sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(newEntry);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="users_8h_1a9724304f5304c5e18783d58daf1e2ff8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="users_8c_1a9724304f5304c5e18783d58daf1e2ff8" kindref="member">loginUser</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>password[]){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(startEntry<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(startEntry-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>,<sp/>name)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>strcmp(startEntry-&gt;<ref refid="struct_user_list_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>,<sp/>password)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref><sp/>=<sp/>startEntry-&gt;<ref refid="struct_user_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1ad68c6985dce5a3d709f854778dedee19" kindref="member">nif</ref><sp/>=<sp/>startEntry-&gt;<ref refid="struct_user_list_1ad68c6985dce5a3d709f854778dedee19" kindref="member">nif</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref><sp/>=<sp/>startEntry-&gt;<ref refid="struct_user_list_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>,<sp/>startEntry-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>,<sp/>startEntry-&gt;<ref refid="struct_user_list_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1a8877f22b3d1c2d2dc9f729b8b82291b3" kindref="member">role</ref>,<sp/>startEntry-&gt;<ref refid="struct_user_list_1a8877f22b3d1c2d2dc9f729b8b82291b3" kindref="member">role</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startEntry<sp/>=<sp/>startEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="users_8h_1aa658b85d23db66ac2a2873cc9ee1e3de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="users_8c_1aa658b85d23db66ac2a2873cc9ee1e3de" kindref="member">saveUsersOnDatabase</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user_list" kindref="compound">User</ref>*<sp/>aux<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;../databases/users_database.txt&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,</highlight><highlight class="stringliteral">&quot;Id:%d;Name:%s;Password:%s;Nif:%d;Balance:%.2f;Role:%s;\n&quot;</highlight><highlight class="normal">,<sp/>aux-&gt;<ref refid="struct_user_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>,<sp/>aux-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>,<sp/>aux-&gt;<ref refid="struct_user_list_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>,<sp/>aux-&gt;<ref refid="struct_user_list_1ad68c6985dce5a3d709f854778dedee19" kindref="member">nif</ref>,<sp/>aux-&gt;<ref refid="struct_user_list_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref>,<sp/>aux-&gt;<ref refid="struct_user_list_1a8877f22b3d1c2d2dc9f729b8b82291b3" kindref="member">role</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="users_8h_1aa3190709fa215b59580f1e98d4d90fb0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="users_8c_1aa3190709fa215b59580f1e98d4d90fb0" kindref="member">saveUsersOnBinaryDatabase</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user_list" kindref="compound">User</ref>*<sp/>aux<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fp;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;../databases/users_database.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_user_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(aux-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>strlen(aux-&gt;<ref refid="struct_user_list_1a72b952e44981373d9737a72616bb317f" kindref="member">name</ref>)<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(aux-&gt;<ref refid="struct_user_list_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>strlen(aux-&gt;<ref refid="struct_user_list_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>)<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_user_list_1ad68c6985dce5a3d709f854778dedee19" kindref="member">nif</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;aux-&gt;<ref refid="struct_user_list_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(aux-&gt;<ref refid="struct_user_list_1a8877f22b3d1c2d2dc9f729b8b82291b3" kindref="member">role</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>strlen(aux-&gt;<ref refid="struct_user_list_1a8877f22b3d1c2d2dc9f729b8b82291b3" kindref="member">role</ref>)<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="users_8h_1a36ad2b37dc9902e37bb2f143f923bffe" refkind="member"><highlight class="normal"><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*<ref refid="users_8c_1a36ad2b37dc9902e37bb2f143f923bffe" kindref="member">getUsersFromDatabase</ref>(){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*users<sp/>=<sp/>NULL,<sp/>*stack<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id,<sp/>nif;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>balance;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[30],<sp/>password[30],<sp/>role[10];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;../databases/users_database.txt&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>users;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global_8h_1ae7f7fdd55d053ad019b98ea0bd1001f6" kindref="member">isFileEmpty</ref>(</highlight><highlight class="stringliteral">&quot;../databases/users_database.txt&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>users;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fscanf(fp,<sp/></highlight><highlight class="stringliteral">&quot;Id:%d;Name:%[^;];Password:%[^;];Nif:%d;Balance:%f;Role:%[^;\n];\n&quot;</highlight><highlight class="normal">,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>name,<sp/>password,<sp/>&amp;nif,<sp/>&amp;balance,<sp/>role)<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/><ref refid="users_8c_1aae43e4ec2bd4a34eaaa402c89d8eccd1" kindref="member">addUser</ref>(stack,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>nif,<sp/>balance,<sp/>name,<sp/>password,<sp/>role);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stack<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>users<sp/>=<sp/><ref refid="users_8c_1aae43e4ec2bd4a34eaaa402c89d8eccd1" kindref="member">addUser</ref>(users,<sp/>stack-&gt;<ref refid="struct_user_list_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>,<sp/>stack-&gt;nif,<sp/>stack-&gt;balance,<sp/>stack-&gt;name,<sp/>stack-&gt;password,<sp/>stack-&gt;role);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/>stack-&gt;nextEntry;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(users);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="users_8h_1aa7b4e161f2c6c59d4849ce653efd30e5" refkind="member"><highlight class="normal"><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*<ref refid="users_8c_1aa7b4e161f2c6c59d4849ce653efd30e5" kindref="member">deleteUser</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*previousEntry<sp/>=<sp/>startEntry,<sp/>*currentEntry<sp/>=<sp/>startEntry,<sp/>*aux;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentEntry<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nO<sp/>utilizador<sp/>indicado<sp/>nao<sp/>esta<sp/>registado!\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentEntry-&gt;id<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>currentEntry-&gt;nextEntry;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(currentEntry);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(aux);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((currentEntry<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(currentEntry-&gt;id<sp/>!=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousEntry<sp/>=<sp/>currentEntry;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry<sp/>=<sp/>currentEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref><sp/>=<sp/>currentEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(currentEntry);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(startEntry);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nO<sp/>utilizador<sp/>indicado<sp/>nao<sp/>esta<sp/>registado!\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(startEntry);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="users_8h_1ab54a616a3193a2efad78e80b31028430" refkind="member"><highlight class="normal"><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*<ref refid="users_8c_1ab54a616a3193a2efad78e80b31028430" kindref="member">editUser</ref>(<ref refid="struct_user_list" kindref="compound">User</ref><sp/>*startEntry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user_list" kindref="compound">User</ref><sp/>*previousEntry<sp/>=<sp/>startEntry,<sp/>*currentEntry<sp/>=<sp/>startEntry;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentEntry==NULL)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nO<sp/>utilizador<sp/>indicado<sp/>nao<sp/>esta<sp/>registado!\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((currentEntry<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(currentEntry-&gt;id<sp/>!=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousEntry<sp/>=<sp/>currentEntry;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry<sp/>=<sp/>currentEntry-&gt;<ref refid="struct_user_list_1ad92c0a209cd3b2943cd2c0c22a5a5522" kindref="member">nextEntry</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentEntry<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentEntry-&gt;<ref refid="struct_user_list_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref><sp/>=<sp/><ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1a52a01a1ee7bb0cfab931fc44ec76da87" kindref="member">balance</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(currentEntry-&gt;password,<sp/><ref refid="global_8h_1ab725550f6491851805c821cade824e32" kindref="member">session</ref>.<ref refid="struct_session_1ae2f06144744aa77e5443babb0f993ec6" kindref="member">password</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(startEntry);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nO<sp/>utilizador<sp/>indicado<sp/>nao<sp/>esta<sp/>registado!\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(startEntry);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="sources/users.c"/>
  </compounddef>
</doxygen>
